-- USERS TABLE 
CREATE TYPE user_status AS ENUM ('active', 'inactive');

CREATE TABLE IF NOT EXISTS 
  users (
    id SERIAL NOT NULL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(100),
    phone VARCHAR(12),
    email VARCHAR(100) UNIQUE,
    bio VARCHAR(400),
    avatar VARCHAR(200),
    status user_status DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

-- POSTS TABLE 
CREATE TABLE IF NOT EXISTS
  posts (
    id SERIAL NOT NULL PRIMARY KEY,
    caption VARCHAR(400),
    url VARCHAR(200) NOT NULL,
    location POINT,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

CREATE INDEX ON posts(user_id); 

-- COMMENTS TABLE 
CREATE TABLE IF NOT EXISTS 
  comments (
    id SERIAL NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, 
    contents VARCHAR(300) NOT NULL,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    parent_id INTEGER REFERENCES comments(id) ON DELETE CASCADE
  );

-- LIKES TABLE
CREATE TABLE IF NOT EXISTS
  likes (
    id SERIAL NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    post_id INTEGER REFERENCES posts(id) ON DELETE CASCADE,
    comment_id INTEGER REFERENCES comments(id) ON DELETE CASCADE,
    UNIQUE (user_id, post_id, comment_id),
    CHECK (
      COALESCE(post_id::BOOLEAN::INTEGER, 0) 
      +
      COALESCE(comment_id::BOOLEAN::INTEGER, 0)
      =
      1
    )
  );

-- PHOTO TAGS TABLE 
CREATE TABLE IF NOT EXISTS 
  photo_tags (
    id serial NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,    
    user_id INTEGER NOT NULL REFERENCES users(id),
    post_id INTEGER NOT NULL REFERENCES posts(id),
    UNIQUE (user_id, post_id)
  );
  
-- CAPTIONS TAGS TABLE 
CREATE TABLE IF NOT EXISTS 
  caption_tags (
    id SERIAL NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,    
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    location POINT,
    UNIQUE (user_id, post_id)
  );
  
-- FOLLOWER TABLE 
CREATE TABLE IF NOT EXISTS
  followers (
    id SERIAL NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    leader_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    follower_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE (leader_id, follower_id),
    CHECK (leader_id <> follower_id)
  );

-- HASHTAGS TABLE 
CREATE TABLE IF NOT EXISTS
  hashtags (
    id SERIAL NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    title VARCHAR(20) NOT NULL UNIQUE
  );

-- HASHTAG POSTS TABLE 
CREATE TABLE IF NOT EXISTS
  hashtags_posts (
    id SERIAL NOT NULL PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    hashtag_id INTEGER NOT NULL REFERENCES hashtags(id) ON DELETE CASCADE,
    post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    UNIQUE (hashtag_id, post_id)
  );